name: Business Data Sync

on:
  # Scheduled cron jobs removed to avoid conflict with Vercel cron
  # Vercel handles daily sync at 13:00 UTC via vercel.json
  workflow_dispatch:
    inputs:
      sync_mode:
        description: 'Type of sync to run'
        required: true
        default: 'recent'
        type: choice
        options:
          - recent
          - full
          - test
      days_back:
        description: 'Days back to sync (for recent mode)'
        required: false
        default: '7'
      dry_run:
        description: 'Run in dry-run mode (test only)'
        type: boolean
        default: false

jobs:
  sync-business-data:
    name: Sync Calgary Business Data
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Scheduled sync steps removed - Vercel cron handles daily sync now

      - name: Run manual sync (workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "üîÑ Running manual business sync..."
          echo "Mode: ${{ github.event.inputs.sync_mode }}"
          echo "Days back: ${{ github.event.inputs.days_back }}"
          echo "Dry run: ${{ github.event.inputs.dry_run }}"
          
          # Build request body based on inputs
          DAYS_BACK="${{ github.event.inputs.days_back }}"
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          
          if [ "$DRY_RUN" == "true" ]; then
            DRY_RUN_FLAG="true"
          else
            DRY_RUN_FLAG="false"
          fi
          
          REQUEST_BODY="{\"mode\": \"${{ github.event.inputs.sync_mode }}\", \"daysBack\": ${DAYS_BACK:-7}, \"limit\": 25000, \"dryRun\": $DRY_RUN_FLAG}"
          
          echo "Request body: $REQUEST_BODY"
          
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.API_SECRET_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$REQUEST_BODY" \
            "${{ secrets.NEXT_PUBLIC_SITE_URL }}/api/sync-businesses")
          
          echo "Response: $RESPONSE"
          
          # Check if sync was successful
          SUCCESS=$(echo "$RESPONSE" | jq -r '.success')
          if [ "$SUCCESS" != "true" ]; then
            echo "‚ùå Manual sync failed"
            MESSAGE=$(echo "$RESPONSE" | jq -r '.message')
            echo "Error: $MESSAGE"
            exit 1
          else
            echo "‚úÖ Manual sync completed successfully"
            
            # Extract and display stats
            FETCHED=$(echo "$RESPONSE" | jq -r '.stats.fetched')
            INSERTED=$(echo "$RESPONSE" | jq -r '.stats.inserted')
            UPDATED=$(echo "$RESPONSE" | jq -r '.stats.updated')
            PROCESSED=$(echo "$RESPONSE" | jq -r '.stats.processed')
            ERRORS=$(echo "$RESPONSE" | jq -r '.stats.errors')
            DURATION=$(echo "$RESPONSE" | jq -r '.duration')
            
            echo "üìä Manual Sync Stats:"
            echo "  - Fetched: $FETCHED businesses from Calgary API"
            echo "  - Processed: $PROCESSED businesses"
            echo "  - Inserted: $INSERTED new businesses"
            echo "  - Updated: $UPDATED existing businesses"
            echo "  - Errors: $ERRORS"
            echo "  - Duration: ${DURATION}ms"
            
            if [ "$DRY_RUN" == "true" ]; then
              echo "üß™ This was a dry run - no actual changes were made"
            fi
          fi

      - name: Verify sync results
        run: |
          echo "üîç Verifying sync results..."
          
          # Get updated database status
          STATUS_RESPONSE=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.API_SECRET_KEY }}" \
            "${{ secrets.NEXT_PUBLIC_SITE_URL }}/api/sync-businesses?action=status")
          
          echo "Database status: $STATUS_RESPONSE"
          
          # Extract stats
          TOTAL=$(echo "$STATUS_RESPONSE" | jq -r '.data.total_businesses')
          RECENT=$(echo "$STATUS_RESPONSE" | jq -r '.data.recent_businesses')
          CONSUMER_FACING=$(echo "$STATUS_RESPONSE" | jq -r '.data.consumer_facing_businesses')
          
          echo "üìà Current Database Status:"
          echo "  - Total businesses: $TOTAL"
          echo "  - Recent businesses (30 days): $RECENT"
          echo "  - Consumer-facing businesses: $CONSUMER_FACING"

      - name: Test website functionality
        run: |
          echo "üåê Testing website functionality..."
          
          # Test homepage
          HOMEPAGE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.NEXT_PUBLIC_SITE_URL }}")
          if [ "$HOMEPAGE_STATUS" == "200" ]; then
            echo "‚úÖ Homepage: OK"
          else
            echo "‚ùå Homepage: ERROR ($HOMEPAGE_STATUS)"
            exit 1
          fi
          
          # Test businesses page
          BUSINESSES_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.NEXT_PUBLIC_SITE_URL }}/businesses")
          if [ "$BUSINESSES_STATUS" == "200" ]; then
            echo "‚úÖ Businesses page: OK"
          else
            echo "‚ùå Businesses page: ERROR ($BUSINESSES_STATUS)"
            exit 1
          fi
          
          echo "‚úÖ Website functionality verified"

  notify-results:
    name: Notify Sync Results
    runs-on: ubuntu-latest
    needs: [sync-business-data]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.sync-business-data.result == 'success'
        run: |
          echo "‚úÖ Business data sync completed successfully"
          echo "Timestamp: $(date)"
          echo "All systems operational"
        
      - name: Notify failure
        if: needs.sync-business-data.result == 'failure'
        run: |
          echo "‚ùå Business data sync failed"
          echo "Timestamp: $(date)"
          echo "Please check the logs and investigate immediately"
          echo "Manual intervention may be required"
          
          # In production, this would trigger:
          echo "Would trigger in production:"
          echo "- Slack alert to #alerts channel"
          echo "- Email notification to admin"
          echo "- Status page update"
          echo "- Incident tracking creation"

  cleanup:
    name: Cleanup & Maintenance
    runs-on: ubuntu-latest
    needs: [sync-business-data]
    if: needs.sync-business-data.result == 'success' && github.event.schedule == '0 2 * * 6'
    
    steps:
      - name: Run database maintenance
        run: |
          echo "üßπ Running post-sync database maintenance..."
          
          # Trigger database maintenance workflow
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/database-maintenance.yml/dispatches" \
            -d '{"ref":"main","inputs":{"maintenance_type":"routine"}}'
          
          echo "‚úÖ Database maintenance triggered"