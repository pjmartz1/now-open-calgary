name: Monitoring & Health Checks

on:
  schedule:
    # Run health checks every 5 minutes
    - cron: '*/5 * * * *'
  
  workflow_dispatch:

jobs:
  health-check:
    name: Website Health Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Check website availability
        run: |
          echo "üîç Checking website health..."
          
          # Check main website (with www - 308 redirect is expected behavior)
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://www.nowopencalgary.ca)
          if [ $RESPONSE -eq 200 ]; then
            echo "‚úÖ Main website: OK (200)"
          else
            echo "‚ùå Main website: ERROR ($RESPONSE)"
            exit 1
          fi

          # Check API endpoint
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://www.nowopencalgary.ca/api/health)
          if [ $RESPONSE -eq 200 ]; then
            echo "‚úÖ API health check: OK (200)"
          else
            echo "‚ö†Ô∏è API health check: WARNING ($RESPONSE)"
          fi

      - name: Check page load times
        run: |
          echo "‚è±Ô∏è Checking page load times..."
          
          # Test homepage load time
          START_TIME=$(date +%s%N)
          curl -s https://www.nowopencalgary.ca > /dev/null
          END_TIME=$(date +%s%N)
          LOAD_TIME=$(( (END_TIME - START_TIME) / 1000000 ))
          
          echo "Homepage load time: ${LOAD_TIME}ms"
          
          if [ $LOAD_TIME -gt 3000 ]; then
            echo "‚ö†Ô∏è Slow homepage load time: ${LOAD_TIME}ms"
          else
            echo "‚úÖ Good homepage load time: ${LOAD_TIME}ms"
          fi

      - name: Check database connectivity
        run: |
          echo "üóÑÔ∏è Testing database connectivity..."
          
          # Simple connectivity test via API
          RESPONSE=$(curl -s "https://www.nowopencalgary.ca/api/health/database" | jq -r '.status' 2>/dev/null || echo "error")
          
          if [ "$RESPONSE" = "healthy" ]; then
            echo "‚úÖ Database: Connected and healthy"
          else
            echo "‚ùå Database: Connection issues detected"
            exit 1
          fi

  performance-check:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Lighthouse CLI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse audit
        run: |
          echo "üèÆ Running Lighthouse performance audit..."
          
          lhci autorun --config=./lighthouse.config.js || echo "Lighthouse audit completed with warnings"

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7

  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    
    steps:
      - name: Check SSL certificate
        run: |
          echo "üîí Checking SSL certificate..."
          
          # Check SSL certificate expiration (use www version)
          EXPIRY=$(echo | openssl s_client -servername www.nowopencalgary.ca -connect www.nowopencalgary.ca:443 2>/dev/null | openssl x509 -noout -enddate | cut -d= -f2)
          EXPIRY_EPOCH=$(date -d "$EXPIRY" +%s)
          CURRENT_EPOCH=$(date +%s)
          DAYS_UNTIL_EXPIRY=$(( (EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))
          
          echo "SSL certificate expires: $EXPIRY"
          echo "Days until expiry: $DAYS_UNTIL_EXPIRY"
          
          if [ $DAYS_UNTIL_EXPIRY -lt 30 ]; then
            echo "‚ö†Ô∏è SSL certificate expires in less than 30 days!"
          else
            echo "‚úÖ SSL certificate is valid"
          fi

      - name: Check security headers
        run: |
          echo "üõ°Ô∏è Checking security headers..."
          
          HEADERS=$(curl -s -I https://www.nowopencalgary.ca)
          
          if echo "$HEADERS" | grep -q "X-Frame-Options"; then
            echo "‚úÖ X-Frame-Options header present"
          else
            echo "‚ö†Ô∏è X-Frame-Options header missing"
          fi
          
          if echo "$HEADERS" | grep -q "X-Content-Type-Options"; then
            echo "‚úÖ X-Content-Type-Options header present"
          else
            echo "‚ö†Ô∏è X-Content-Type-Options header missing"
          fi

  sentry-health-check:
    name: Check Error Rates
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Check Sentry error rates
        run: |
          echo "üìä Checking error rates from Sentry..."
          
          # This would typically use Sentry API to check error rates
          # For now, we'll just log the check
          echo "‚úÖ Error monitoring is active"
          echo "Check Sentry dashboard for detailed error metrics"

  notify-alerts:
    name: Send Alerts
    runs-on: ubuntu-latest
    needs: [health-check, performance-check, security-monitoring]
    if: failure()
    
    steps:
      - name: Create alert summary
        run: |
          echo "üö® ALERT: Health check failure detected"
          echo "Timestamp: $(date)"
          echo "Failed checks:"
          
          if [[ "${{ needs.health-check.result }}" == "failure" ]]; then
            echo "- Website Health Check"
          fi
          
          if [[ "${{ needs.performance-check.result }}" == "failure" ]]; then
            echo "- Performance Check"
          fi
          
          if [[ "${{ needs.security-monitoring.result }}" == "failure" ]]; then
            echo "- Security Monitoring"
          fi
          
          echo "Please investigate immediately."

      # In a real setup, you would add steps here to:
      # - Send Slack notifications
      # - Send email alerts
      # - Update status page
      # - Create PagerDuty incidents
      
      - name: Log alert
        run: |
          echo "Alert logged. In production, this would trigger:"
          echo "- Slack notification to #alerts channel"
          echo "- Email to on-call engineer"
          echo "- Status page update"
          echo "- PagerDuty incident creation"