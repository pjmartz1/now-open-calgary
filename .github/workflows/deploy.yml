name: Deploy to Production

on:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'DEVELOPMENT_NOTES.md'
      - 'CLAUDE.md'
      - '.env.example'
      - 'docs/**'
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Run unit tests
        run: npm run test:ci

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        if: github.event_name == 'push'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.deployment-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
          NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ${{ github.event.inputs.environment == 'staging' && '--target staging' || '--prod' }}

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        if: success()
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: ${{ github.event.inputs.environment || 'production' }}
          sourcemaps: '.next/static'
          url_prefix: '~/_next/static/'

  post-deployment:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Wait for deployment
        run: sleep 30

      - name: Run smoke tests
        run: npm run test:a11y
        env:
          PLAYWRIGHT_BASE_URL: ${{ needs.build-and-deploy.outputs.deployment-url }}

      - name: Run E2E tests on production
        run: npm run cypress:headless
        env:
          CYPRESS_baseUrl: ${{ needs.build-and-deploy.outputs.deployment-url }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results
          path: |
            accessibility-results/
            cypress/screenshots/
            cypress/videos/
          retention-days: 7

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [build-and-deploy, post-deployment]
    if: always()
    
    steps:
      - name: Notify deployment success
        if: needs.build-and-deploy.result == 'success' && needs.post-deployment.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "URL: ${{ needs.build-and-deploy.outputs.deployment-url }}"

      - name: Notify deployment failure
        if: needs.build-and-deploy.result == 'failure' || needs.post-deployment.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Check the logs for details."